# controllers/bao_cao_controller.py
import json
import os
from datetime import datetime
from collections import defaultdict
from tkinter import messagebox
import logging

class BaoCaoController:
    def __init__(self):
        self.customer_data = []
        self.stats = {}
        self.data_loaded = False
        self.data_file_path = None
        
        # Thi·∫øt l·∫≠p logging
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
    
    def load_customer_data(self):
        """T·∫£i d·ªØ li·ªáu kh√°ch h√†ng t·ª´ file JSON"""
        try:
            # Th·ª≠ t√¨m file customer.json trong c√°c th∆∞ m·ª•c c√≥ th·ªÉ
            possible_paths = [
                'data/customer.json',
                'customer.json',
                '../data/customer.json',
                'assets/customer.json',
                'assets/data/customer.json'
            ]
            
            self.data_loaded = False
            for path in possible_paths:
                if os.path.exists(path):
                    with open(path, 'r', encoding='utf-8') as file:
                        data = json.load(file)
                        if self._validate_json_data(data):
                            self.customer_data = data
                            self.data_file_path = path
                            self.data_loaded = True
                            self.logger.info(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´: {path}")
                            break
                        else:
                            self.logger.warning(f"‚ö†Ô∏è File {path} c√≥ ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá")
            
            if not self.data_loaded:
                self.logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file customer.json h·ª£p l·ªá, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u")
                self.use_sample_data()
                self.data_loaded = True
            
            # T√≠nh to√°n th·ªëng k√™ sau khi t·∫£i d·ªØ li·ªáu
            self.calculate_all_statistics()
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
            self.use_sample_data()
            self.calculate_all_statistics()
            return False
    
    def _validate_json_data(self, data):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu JSON"""
        if not isinstance(data, list):
            return False
        
        if len(data) == 0:
            return True  # Cho ph√©p d·ªØ li·ªáu r·ªóng
        
        # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
        required_fields = ['customer_id', 'name']
        for customer in data:
            if not isinstance(customer, dict):
                return False
            for field in required_fields:
                if field not in customer:
                    return False
        
        return True
    
    def use_sample_data(self):
        """S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u khi kh√¥ng t√¨m th·∫•y file"""
        self.customer_data = [
            # {
            #     "customer_id": "KH1001",
            #     "name": "Nguy·ªÖn VƒÉn An",
            #     "group": "VIP",
            #     "gender": "Nam",
            #     "phone": "0987654321",
            #     "email": "an.nguyen@email.com",
            #     "customer_type": "VIP",
            #     "cmnd": "123456789",
            #     "birth_date": "1990-03-15",
            #     "address": "H√† N·ªôi",
            #     "product": "üíª Laptop Gaming",
            #     "quantity": "2",
            #     "unit_price": "25000000",
            #     "total_amount": "50000000"
            # },
            # {
            #     "customer_id": "KH1002",
            #     "name": "Tr·∫ßn Th·ªã B√¨nh",
            #     "group": "Th∆∞·ªùng",
            #     "gender": "N·ªØ",
            #     "phone": "0976543210",
            #     "email": "binh.tran@email.com",
            #     "customer_type": "Th∆∞·ªùng",
            #     "cmnd": "987654321",
            #     "birth_date": "1985-07-20",
            #     "address": "H·ªì Ch√≠ Minh",
            #     "product": "üì± Smartphone",
            #     "quantity": "1",
            #     "unit_price": "15000000",
            #     "total_amount": "15000000"
            # },
            # {
            #     "customer_id": "KH1003",
            #     "name": "L√™ VƒÉn C∆∞·ªùng",
            #     "group": "VIP",
            #     "gender": "Nam",
            #     "phone": "0965432109",
            #     "email": "cuong.le@email.com",
            #     "customer_type": "VIP",
            #     "cmnd": "456789123",
            #     "birth_date": "1992-11-10",
            #     "address": "ƒê√† N·∫µng",
            #     "product": "üñ•Ô∏è PC Desktop",
            #     "quantity": "1",
            #     "unit_price": "35000000",
            #     "total_amount": "35000000"
            # },
            # {
            #     "customer_id": "KH1004",
            #     "name": "Ph·∫°m Th·ªã Dung",
            #     "group": "Th∆∞·ªùng",
            #     "gender": "N·ªØ",
            #     "phone": "0954321098",
            #     "email": "dung.pham@email.com",
            #     "customer_type": "Th∆∞·ªùng",
            #     "cmnd": "789123456",
            #     "birth_date": "1988-05-25",
            #     "address": "H·∫£i Ph√≤ng",
            #     "product": "‚åö Smartwatch",
            #     "quantity": "2",
            #     "unit_price": "8000000",
            #     "total_amount": "16000000"
            # },
            # {
            #     "customer_id": "KH1005",
            #     "name": "Ho√†ng VƒÉn Em",
            #     "group": "VIP",
            #     "gender": "Nam",
            #     "phone": "0943210987",
            #     "email": "em.hoang@email.com",
            #     "customer_type": "VIP",
            #     "cmnd": "321654987",
            #     "birth_date": "1995-12-08",
            #     "address": "C·∫ßn Th∆°",
            #     "product": "üéß Headphones Premium",
            #     "quantity": "3",
            #     "unit_price": "5000000",
            #     "total_amount": "15000000"
            # }
        ]
        self.data_file_path = None
    
    def clean_amount_value(self, amount):
        """L√†m s·∫°ch v√† chuy·ªÉn ƒë·ªïi gi√° tr·ªã ti·ªÅn t·ªá"""
        if not amount:
            return 0
        
        try:
            # Chuy·ªÉn th√†nh string n·∫øu ch∆∞a ph·∫£i
            amount_str = str(amount).strip()
            
            # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
            cleaned = ''.join(char for char in amount_str if char.isdigit())
            
            return int(cleaned) if cleaned else 0
        except (ValueError, TypeError):
            return 0
    
    def clean_quantity_value(self, quantity):
        """L√†m s·∫°ch v√† chuy·ªÉn ƒë·ªïi gi√° tr·ªã s·ªë l∆∞·ª£ng"""
        if not quantity:
            return 0
        
        try:
            # Chuy·ªÉn th√†nh string v√† lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
            qty_str = str(quantity).strip()
            cleaned = ''.join(char for char in qty_str if char.isdigit())
            return int(cleaned) if cleaned else 0
        except (ValueError, TypeError):
            return 0
    
    def calculate_all_statistics(self):
        """T√≠nh to√°n t·∫•t c·∫£ c√°c th·ªëng k√™ t·ª´ d·ªØ li·ªáu"""
        self.stats = {
            'total_customers': len(self.customer_data),
            'vip_customers': 0,
            'regular_customers': 0,
            'male_customers': 0,
            'female_customers': 0,
            'total_revenue': 0,
            'total_quantity': 0,
            'products': defaultdict(int),
            'regions': defaultdict(int),
            'age_groups': defaultdict(int),
            'monthly_revenue': defaultdict(int),
            'customer_types': defaultdict(int),
            'top_customers': [],
            'revenue_by_region': defaultdict(int),
            'product_revenue': defaultdict(int)
        }
        
        total_revenues = []
        
        for customer in self.customer_data:
            try:
                # ƒê·∫øm lo·∫°i kh√°ch h√†ng - s·ª≠ d·ª•ng c·∫£ 'customer_type' v√† 'group'
                customer_type = customer.get('customer_type', customer.get('group', 'Th∆∞·ªùng'))
                if customer_type.lower() in ['vip', 'VIP']:
                    self.stats['vip_customers'] += 1
                else:
                    self.stats['regular_customers'] += 1
                
                self.stats['customer_types'][customer_type] += 1
                
                # ƒê·∫øm gi·ªõi t√≠nh
                gender = customer.get('gender', 'Kh√¥ng x√°c ƒë·ªãnh')
                if gender.lower() in ['nam', 'male']:
                    self.stats['male_customers'] += 1
                elif gender.lower() in ['n·ªØ', 'female', 'nu']:
                    self.stats['female_customers'] += 1
                
                # T√≠nh doanh thu - s·ª≠ d·ª•ng h√†m clean_amount_value
                revenue = self.clean_amount_value(customer.get('total_amount', 0))
                self.stats['total_revenue'] += revenue
                
                if revenue > 0:
                    # L∆∞u th√¥ng tin kh√°ch h√†ng v·ªõi doanh thu ƒë·ªÉ t√¨m top customers
                    total_revenues.append({
                        'customer_id': customer.get('customer_id', 'N/A'),
                        'name': customer.get('name', 'N/A'),
                        'revenue': revenue,
                        'product': customer.get('product', 'N/A'),
                        'customer_type': customer_type
                    })
                    
                    # Doanh thu theo khu v·ª±c
                    region = customer.get('address', 'Kh√¥ng x√°c ƒë·ªãnh')
                    self.stats['revenue_by_region'][region] += revenue
                    
                    # Doanh thu theo s·∫£n ph·∫©m
                    product = customer.get('product', 'Kh√¥ng x√°c ƒë·ªãnh')
                    self.stats['product_revenue'][product] += revenue
                
                # ƒê·∫øm s·ªë l∆∞·ª£ng s·∫£n ph·∫©m - s·ª≠ d·ª•ng h√†m clean_quantity_value
                quantity = self.clean_quantity_value(customer.get('quantity', 0))
                self.stats['total_quantity'] += quantity
                
                # Th·ªëng k√™ s·∫£n ph·∫©m
                product = customer.get('product', 'Kh√¥ng x√°c ƒë·ªãnh')
                self.stats['products'][product] += 1
                
                # Th·ªëng k√™ khu v·ª±c
                address = customer.get('address', 'Kh√¥ng x√°c ƒë·ªãnh')
                self.stats['regions'][address] += 1
                
                # T√≠nh tu·ªïi v√† nh√≥m tu·ªïi
                self._calculate_age_group(customer)
                
            except Exception as e:
                self.logger.warning(f"L·ªói khi x·ª≠ l√Ω kh√°ch h√†ng {customer.get('customer_id', 'N/A')}: {e}")
                continue
        
        # T√¨m top 5 kh√°ch h√†ng c√≥ doanh thu cao nh·∫•t
        self.stats['top_customers'] = sorted(total_revenues, key=lambda x: x['revenue'], reverse=True)[:5]
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë b·ªï sung
        self._calculate_additional_metrics()
    
    def _calculate_age_group(self, customer):
        """T√≠nh to√°n nh√≥m tu·ªïi c·ªßa kh√°ch h√†ng"""
        try:
            birth_date = customer.get('birth_date', '')
            if birth_date:
                birth_year = int(birth_date.split('-')[0])
                current_year = datetime.now().year
                age = current_year - birth_year
                
                if age < 25:
                    age_group = "18-24"
                elif age < 35:
                    age_group = "25-34"
                elif age < 45:
                    age_group = "35-44"
                elif age < 55:
                    age_group = "45-54"
                else:
                    age_group = "55+"
                
                self.stats['age_groups'][age_group] += 1
            else:
                self.stats['age_groups']['Kh√¥ng x√°c ƒë·ªãnh'] += 1
        except (ValueError, IndexError):
            self.stats['age_groups']['Kh√¥ng x√°c ƒë·ªãnh'] += 1
    
    def _calculate_additional_metrics(self):
        """T√≠nh to√°n c√°c ch·ªâ s·ªë b·ªï sung"""
        if self.stats['total_customers'] > 0:
            self.stats['avg_revenue_per_customer'] = self.stats['total_revenue'] / self.stats['total_customers']
            self.stats['vip_percentage'] = (self.stats['vip_customers'] / self.stats['total_customers']) * 100
            self.stats['male_percentage'] = (self.stats['male_customers'] / self.stats['total_customers']) * 100
            self.stats['female_percentage'] = (self.stats['female_customers'] / self.stats['total_customers']) * 100
        else:
            self.stats['avg_revenue_per_customer'] = 0
            self.stats['vip_percentage'] = 0
            self.stats['male_percentage'] = 0
            self.stats['female_percentage'] = 0
    
    def get_statistics(self):
        """Tr·∫£ v·ªÅ th·ªëng k√™ ƒë√£ t√≠nh to√°n"""
        if not self.data_loaded:
            self.load_customer_data()
        return self.stats.copy()  # Tr·∫£ v·ªÅ b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi kh√¥ng mong mu·ªën
    
    def get_customer_data(self):
        """Tr·∫£ v·ªÅ d·ªØ li·ªáu kh√°ch h√†ng"""
        if not self.data_loaded:
            self.load_customer_data()
        return self.customer_data.copy()  # Tr·∫£ v·ªÅ b·∫£n sao
    
    def get_report_summary(self):
        """T·∫°o t√≥m t·∫Øt b√°o c√°o"""
        if not self.data_loaded:
            self.load_customer_data()
        
        # T√¨m s·∫£n ph·∫©m v√† khu v·ª±c h√†ng ƒë·∫ßu
        top_product = 'N/A'
        top_region = 'N/A'
        
        if self.stats['products']:
            top_product = max(self.stats['products'].items(), key=lambda x: x[1])[0]
        
        if self.stats['regions']:
            top_region = max(self.stats['regions'].items(), key=lambda x: x[1])[0]
        
        summary = {
            'report_date': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            'data_source': self.data_file_path or 'D·ªØ li·ªáu m·∫´u',
            'total_customers': self.stats['total_customers'],
            'total_revenue': self.stats['total_revenue'],
            'vip_customers': self.stats['vip_customers'],
            'regular_customers': self.stats['regular_customers'],
            'vip_percentage': self.stats.get('vip_percentage', 0),
            'male_customers': self.stats['male_customers'],
            'female_customers': self.stats['female_customers'],
            'total_quantity': self.stats['total_quantity'],
            'top_product': top_product,
            'top_region': top_region,
            'avg_revenue': self.stats.get('avg_revenue_per_customer', 0)
        }
        
        return summary
    
    def export_report_data(self):
        """Xu·∫•t d·ªØ li·ªáu b√°o c√°o ƒë·ªÉ s·ª≠ d·ª•ng cho giao di·ªán"""
        if not self.data_loaded:
            self.load_customer_data()
        
        return {
            'customer_data': self.get_customer_data(),
            'statistics': self.get_statistics(),
            'summary': self.get_report_summary(),
            'data_validation': self.validate_data()
        }
    
    def validate_data(self):
        """Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d·ªØ li·ªáu"""
        if not self.customer_data:
            return {
                'is_valid': False,
                'message': "Kh√¥ng c√≥ d·ªØ li·ªáu kh√°ch h√†ng",
                'details': []
            }
        
        required_fields = ['customer_id', 'name']
        optional_fields = ['phone', 'email', 'address', 'product', 'total_amount']
        
        issues = []
        warnings = []
        
        for i, customer in enumerate(self.customer_data):
            customer_issues = []
            
            # Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
            for field in required_fields:
                if field not in customer or not customer[field]:
                    customer_issues.append(f"thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc '{field}'")
            
            # Ki·ªÉm tra c√°c tr∆∞·ªùng t√πy ch·ªçn v√† c·∫£nh b√°o n·∫øu thi·∫øu
            for field in optional_fields:
                if field not in customer or not customer[field]:
                    warnings.append(f"Kh√°ch h√†ng {customer.get('customer_id', i+1)} thi·∫øu tr∆∞·ªùng '{field}'")
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
            phone = customer.get('phone', '')
            if phone and not phone.replace(' ', '').replace('-', '').isdigit():
                customer_issues.append("s·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
            
            # Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
            email = customer.get('email', '')
            if email and '@' not in email:
                customer_issues.append("email kh√¥ng h·ª£p l·ªá")
            
            if customer_issues:
                issues.append(f"Kh√°ch h√†ng {customer.get('customer_id', i+1)}: {', '.join(customer_issues)}")
        
        is_valid = len(issues) == 0
        
        return {
            'is_valid': is_valid,
            'message': "D·ªØ li·ªáu h·ª£p l·ªá" if is_valid else f"T√¨m th·∫•y {len(issues)} l·ªói trong d·ªØ li·ªáu",
            'errors': issues,
            'warnings': warnings,
            'total_records': len(self.customer_data),
            'error_count': len(issues),
            'warning_count': len(warnings)
        }
    
    def refresh_data(self):
        """L√†m m·ªõi d·ªØ li·ªáu t·ª´ file"""
        self.data_loaded = False
        self.customer_data = []
        self.stats = {}
        return self.load_customer_data()
    
    def save_data(self, file_path=None):
        """L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i v√†o file"""
        try:
            save_path = file_path or self.data_file_path or 'data/customer.json'
            
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs(os.path.dirname(save_path), exist_ok=True)
            
            with open(save_path, 'w', encoding='utf-8') as file:
                json.dump(self.customer_data, file, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o: {save_path}")
            return True, f"D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {save_path}"
            
        except Exception as e:
            error_msg = f"L·ªói khi l∆∞u d·ªØ li·ªáu: {e}"
            self.logger.error(error_msg)
            return False, error_msg
    
    def add_customer(self, customer_data):
        """Th√™m kh√°ch h√†ng m·ªõi"""
        try:
            # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            required_fields = ['customer_id', 'name']
            for field in required_fields:
                if field not in customer_data or not customer_data[field]:
                    return False, f"Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {field}"
            
            # Ki·ªÉm tra tr√πng ID
            existing_ids = [c.get('customer_id') for c in self.customer_data]
            if customer_data['customer_id'] in existing_ids:
                return False, f"M√£ kh√°ch h√†ng {customer_data['customer_id']} ƒë√£ t·ªìn t·∫°i"
            
            # Th√™m kh√°ch h√†ng
            self.customer_data.append(customer_data)
            self.calculate_all_statistics()
            
            return True, "Th√™m kh√°ch h√†ng th√†nh c√¥ng"
            
        except Exception as e:
            return False, f"L·ªói khi th√™m kh√°ch h√†ng: {e}"
    
    def update_customer(self, customer_id, updated_data):
        """C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng"""
        try:
            for i, customer in enumerate(self.customer_data):
                if customer.get('customer_id') == customer_id:
                    # C·∫≠p nh·∫≠t d·ªØ li·ªáu
                    self.customer_data[i].update(updated_data)
                    self.calculate_all_statistics()
                    return True, "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng"
            
            return False, f"Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: {customer_id}"
            
        except Exception as e:
            return False, f"L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: {e}"
    
    def delete_customer(self, customer_id):
        """X√≥a kh√°ch h√†ng"""
        try:
            for i, customer in enumerate(self.customer_data):
                if customer.get('customer_id') == customer_id:
                    deleted_customer = self.customer_data.pop(i)
                    self.calculate_all_statistics()
                    return True, f"ƒê√£ x√≥a kh√°ch h√†ng: {deleted_customer.get('name', 'N/A')}"
            
            return False, f"Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi ID: {customer_id}"
            
        except Exception as e:
            return False, f"L·ªói khi x√≥a kh√°ch h√†ng: {e}"